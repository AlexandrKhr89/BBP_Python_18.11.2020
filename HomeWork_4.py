# Задания:

# #####################################################

# 1) У вас есть список my_list с значениями типа int.
# Распечатать те значения, которые больше 100.
# Задание выполнить с помощью цикла for.

print("\nTask 1")
my_list = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233]
for value in my_list:
    if value > 100:
        print(value)

# #####################################################

# 2) У вас есть список my_list с значениями типа int, и пустой список my_results.
# Добавить в my_results те значения, которые больше 100.
# Распечатать список my_results.
# Задание выполнить с помощью цикла for.

print("\nTask 2")
my_list = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233]
my_results = []
for value in my_list:
    if value > 100:
        my_results.append(value)
print(my_results)

# #####################################################

# 3) У вас есть список my_list с значениями типа int.
# Если в my_list количество элементов меньше 2, то в конец добавить значение 0.
# Если количество элементов больше или равно 2, то добавить сумму последних двух элементов.
# Количество элементов в списке можно получить с помощью функции len(my_list)

print("\nTask 3")
# my_list = [1]
my_list = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233]
print(f'my_list=', my_list)
if len(my_list) < 2:
    my_list.append(10)
elif len(my_list) >= 2:
    last_2_elements_sum = my_list[-1] + my_list[-2]
    my_list.append(last_2_elements_sum)
print(my_list)

# #####################################################

# 4) Пользователь вводит value - число с запятой (например 3.14) с клавиатуры.
# Вы приводите это value к типу float и выводите результат выражения value ** -1.
# Написать программу, которая вычисляет данное выражение и
# корректно обрабатывает возможные исключения.

print("\nTask 4")
value_float = 0.0
NUMB_SET = frozenset('.0123456789')
while value_float == 0.0:
    value_str = input("Введите число с запятой: ").replace(',', '.')
    for symbol in value_str:
        if symbol in NUMB_SET:
            is_float = True
            # print(symbol, "in numb_set", "is_float = ", is_float)
        else:
            is_float = False
            # print(symbol, "NOT in numb_set", "is_float = ", is_float)
            break
    if is_float:
        value_float = float(value_str)
        try:
            print(value_float, "^ -1 = ", value_float ** -1, "\n")
        except ZeroDivisionError:
            print("Увы, на ноль делить число мы не сильны. \nПопробуйте ввести другое число")
    else:
        print("Это не число.")

# #####################################################

# Рассмотрим еще один пример использования списка -
# использование списка чисел для доступа по индексу к строке.
#
# my_indexes = [0, 1, 2, 3, 4]
# my_string = "abcde"
# for index in my_indexes:
# 	print(my_string[index]) # это называется обращение по индексу

# #####################################################

# 5) У вас есть список значений my_list и список индексов my_indexes
# (начинается с нуля и количество элементов совпадает с количеством в my_list.
# Распечатать значения из my_list через обращение по индексу. См. пример выше.

print("\nTask 5")
my_list = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233]
my_indexes = [0, 1, 2, 3, 7, 7, 7, 7, 8, 9, 10, 11, 12, 13]
for index in range(len(my_list)):
    print(my_indexes[index], my_list[my_indexes[index]])

# #####################################################

# 6) У вас есть два списка my_list_1 и my_list_2 равной длинны и
# список индексов my_indexes (начинается с нуля и количество элементов
# совпадает с количеством в my_list_1.
# Распечатать пары значений из my_list_1 и my_list_2 через обращение по индексу.
#
# Например для списков [1, 3] и [2, 4]:
# (1, 2)
# (3, 4)
#
# #####################################################

print("\nTask 6")
my_list_1 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233]
my_list_2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
my_indexes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
for index in range(len(my_list_1)):
    print("(", my_list_1[my_indexes[index]], my_list_2[my_indexes[index]], ")")

# #####################################################
# Еще один пример - вложенные циклы (цикл в цикле).
# my_string_1 = "12"
# my_string_2 = "34"
# for symb_1 in my_string_1:
# 	for symb_2 in my_string_2:
# 		print(symb_1 + symb_2)
#
# Результат:
# "13"	# перебирается все элементы из my_string_2 для элемента "1" из my_string_1
# "14"
# "23"	# перебирается все элементы из my_string_2 для элемента "2" из my_string_1
# "24"
# #####################################################

# 7) У вас есть строка my_string = '0123456789'.
# Сгенерировать целые числа (тип int) от 0 до 99 и поместить их в список.
# Задание нужно выполнить ТОЛЬКО через цикл в цикле(См. пример выше) и приведение типов .
# Генерирование через range или другие "фишки" я засчитывать не буду ))

print("\nTask 7")
my_string = '0123456789'
my_numb_list = []
for symbol_1 in my_string:
    for symbol_2 in my_string:
        numb_str = symbol_1 + symbol_2
        numb_int = int(numb_str)
        my_numb_list.append(numb_int)
print(my_numb_list)

# #####################################################

print("\nThat is all")
